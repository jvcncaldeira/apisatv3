from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field, validator
from typing import List, Optional
from datetime import datetime
import pytz
import uvicorn
import os

app = FastAPI()

# Modelo Pydantic para validação dos dados
class Cliente(BaseModel):
    nome: str = Field(..., max_length=20)
    tipo_atendimento: str = Field(..., min_length=1, max_length=1)
    posicao: int
    data_chegada: datetime
    atendido: bool = False

    @validator('tipo_atendimento')
    def validar_tipo_atendimento(cls, v):
        if v not in ['N', 'P']:
            raise ValueError('Tipo de atendimento deve ser N (Normal) ou P (Prioritário)')
        return v

class ClienteEntrada(BaseModel):
    nome: str = Field(..., max_length=20)
    tipo_atendimento: str = Field(..., min_length=1, max_length=1)

# Lista para armazenar os clientes (simulando um banco de dados)
fila: List[Cliente] = []

@app.get("/")
def read_root():
    """Rota raiz para verificar se a API está funcionando"""
    return {"status": "online", "message": "API de Fila está funcionando"}

@app.get("/fila", response_model=List[dict])
def listar_fila():
    """Retorna todos os clientes não atendidos na fila"""
    clientes_nao_atendidos = [
        {
            "posicao": cliente.posicao,
            "nome": cliente.nome,
            "data_chegada": cliente.data_chegada
        }
        for cliente in fila
        if not cliente.atendido
    ]
    return clientes_nao_atendidos

@app.get("/fila/{id}")
def obter_cliente(id: int):
    """Retorna o cliente na posição especificada"""
    for cliente in fila:
        if cliente.posicao == id and not cliente.atendido:
            return {
                "posicao": cliente.posicao,
                "nome": cliente.nome,
                "data_chegada": cliente.data_chegada
            }
    raise HTTPException(status_code=404, detail="Cliente não encontrado na posição especificada")

@app.post("/fila")
def adicionar_cliente(cliente: ClienteEntrada):
    """Adiciona um novo cliente à fila"""
    # Determina a posição do novo cliente
    posicoes_ocupadas = [c.posicao for c in fila if not c.atendido]
    nova_posicao = max(posicoes_ocupadas + [0]) + 1
    
    # Se for atendimento prioritário, insere na frente dos normais
    if cliente.tipo_atendimento == 'P':
        # Encontra a última posição prioritária
        ultima_pos_prioritaria = 0
        for c in fila:
            if not c.atendido and c.tipo_atendimento == 'P':
                ultima_pos_prioritaria = max(ultima_pos_prioritaria, c.posicao)
        
        # Reposiciona os clientes normais
        if ultima_pos_prioritaria > 0:
            for c in fila:
                if not c.atendido and c.tipo_atendimento == 'N' and c.posicao > ultima_pos_prioritaria:
                    c.posicao += 1
            nova_posicao = ultima_pos_prioritaria + 1
    
    # Cria o novo cliente
    novo_cliente = Cliente(
        nome=cliente.nome,
        tipo_atendimento=cliente.tipo_atendimento,
        posicao=nova_posicao,
        data_chegada=datetime.now(pytz.UTC),
        atendido=False
    )
    
    fila.append(novo_cliente)
    return {"message": "Cliente adicionado com sucesso", "posicao": nova_posicao}

@app.put("/fila")
def atualizar_fila():
    """Atualiza a posição dos clientes na fila"""
    modificados = 0
    
    # Primeiro, marca como atendido quem está na posição 1
    for cliente in fila:
        if not cliente.atendido and cliente.posicao == 1:
            cliente.atendido = True
            cliente.posicao = 0
            modificados += 1
    
    # Depois, atualiza a posição dos demais
    for cliente in fila:
        if not cliente.atendido and cliente.posicao > 1:
            cliente.posicao -= 1
            modificados += 1
    
    return {"message": f"Fila atualizada. {modificados} posições modificadas"}

@app.delete("/fila/{id}")
def remover_cliente(id: int):
    """Remove um cliente da fila e atualiza as posições"""
    # Encontra o cliente a ser removido
    cliente_removido = None
    for i, cliente in enumerate(fila):
        if cliente.posicao == id and not cliente.atendido:
            cliente_removido = fila.pop(i)
            break
    
    if not cliente_removido:
        raise HTTPException(status_code=404, detail="Cliente não encontrado na posição especificada")
    
    # Atualiza as posições dos clientes restantes
    for cliente in fila:
        if not cliente.atendido and cliente.posicao > id:
            cliente.posicao -= 1
    
    return {"message": f"Cliente {cliente_removido.nome} removido com sucesso"}

if __name__ == "__main__":
    # Obtém a porta do ambiente (Heroku define a porta dinamicamente)
    port = int(os.getenv("PORT", 8000))
    
    # Inicia o servidor
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=port,
        log_level="info"
    )
